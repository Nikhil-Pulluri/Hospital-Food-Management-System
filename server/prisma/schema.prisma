// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Patient {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  age        Int
  gender     String
  contact    String
  emergency  String
  roomNumber String
  bedNumber  String
  floor      String
  allergies  String[]
  disease    String
  dietChart  DietChart[]

  DeliveryTask DeliveryTask[]
}

model DietChart {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  patientId String
  patient   Patient @relation(fields: [patientId], references: [id])
  morning   String
  evening   String
  night     String
  notes     String?

  DeliveryStatus DeliveryStatus[]
  PantryTask     PantryTask[]
}

model PantryStaff {
  id       String       @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  contact  String
  location String
  tasks    PantryTask[]
}

model PantryTask {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  description   String
  status        String
  assignedAt    DateTime    @default(now())
  pantryStaffId String
  pantryStaff   PantryStaff @relation(fields: [pantryStaffId], references: [id])
  dietChartId   String?
  dietChart     DietChart?  @relation(fields: [dietChartId], references: [id])
}

model DeliveryTask {
  id                  String            @id @default(auto()) @map("_id") @db.ObjectId
  patientId           String
  patient             Patient           @relation(fields: [patientId], references: [id])
  deliveryPersonnelId String
  deliveryPersonnel   DeliveryPersonnel @relation(fields: [deliveryPersonnelId], references: [id])
  status              String            @default("Pending") // "Pending", "Delivered"
  assignedAt          DateTime          @default(now())
  deliveredAt         DateTime?
  notes               String?
}

model DeliveryPersonnel {
  id      String         @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  contact String
  tasks   DeliveryTask[]
}

model DeliveryStatus {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  dietChartId   String
  dietChart     DietChart @relation(fields: [dietChartId], references: [id])
  deliveryTime  DateTime
  status        String
  deliveryNotes String?
}
